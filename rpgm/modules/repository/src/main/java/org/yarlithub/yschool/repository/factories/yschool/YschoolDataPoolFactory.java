package org.yarlithub.yschool.repository.factories.yschool;

import com.felees.hbnpojogen.randomlib.data.dataGeneration.*;
import org.springframework.stereotype.Component;
import org.yarlithub.yschool.repository.factories.yschool.YschoolDataPoolFactory;
import org.yarlithub.yschool.repository.model.obj.yschool.*;

import com.google.common.collect.ArrayListMultimap;
import com.google.common.collect.Multimap;
import java.util.Collection;
import com.felees.hbnpojogen.randomlib.data.dataGeneration.BasicDataGenerator;

/**
 * DAO factory implementation.
 * 
 * @author autogenerated
 */
@Component
public class YschoolDataPoolFactory {
	/** Table commit order. */
	private static final Multimap<String, String> tableDeps = ArrayListMultimap
			.create();
	/** DB commit order. */
	private static final String[] commitOrder = new String[] {
			"StudentClassroomModule", "ClassroomModuleHasStaffHasRole",
			"ClassroomModule", "User", "SectionHasStaffHasRole",
			"SchoolHasStaffHasRole", "Results", "Module", "Marks",
			"ClassroomStudent", "ClassroomHasStaffHasRole", "Classroom",
			"UserRole", "Subject", "StudentSync", "StudentGeneralexamProfile",
			"Student", "StaffHasRole", "Staff", "Section", "School", "Role",
			"Grade", "ExamType", "ExamSync", "Exam", "Division",
			"ClassAnalyzerClassifier" };
	static {
		// Store table deps for possible use.
		tableDeps.put("Classroom", "Division");
		tableDeps.put("Classroom", "Grade");
		tableDeps.put("ClassroomHasStaffHasRole", "Classroom");
		tableDeps.put("ClassroomHasStaffHasRole", "StaffHasRole");
		tableDeps.put("ClassroomModule", "Classroom");
		tableDeps.put("ClassroomModule", "Module");
		tableDeps.put("ClassroomModuleHasStaffHasRole", "ClassroomModule");
		tableDeps.put("ClassroomModuleHasStaffHasRole", "StaffHasRole");
		tableDeps.put("ClassroomStudent", "Classroom");
		tableDeps.put("ClassroomStudent", "Student");
		tableDeps.put("ExamSync", "Exam");
		tableDeps.put("Marks", "Exam");
		tableDeps.put("Marks", "Student");
		tableDeps.put("Module", "Grade");
		tableDeps.put("Module", "Subject");
		tableDeps.put("Results", "Exam");
		tableDeps.put("Results", "Student");
		tableDeps.put("SchoolHasStaffHasRole", "School");
		tableDeps.put("SchoolHasStaffHasRole", "StaffHasRole");
		tableDeps.put("SectionHasStaffHasRole", "Section");
		tableDeps.put("SectionHasStaffHasRole", "StaffHasRole");
		tableDeps.put("StaffHasRole", "Role");
		tableDeps.put("StaffHasRole", "Staff");
		tableDeps.put("StudentClassroomModule", "ClassroomModule");
		tableDeps.put("StudentClassroomModule", "ClassroomStudent");
		tableDeps.put("StudentGeneralexamProfile", "Student");
		tableDeps.put("StudentSync", "Student");
		tableDeps.put("User", "UserRole");
	}

	/**
	 * Data pool factory for Classroom.
	 * 
	 * @return Classroom A Classroom object
	 */
	public static Classroom getClassroom() {

		Classroom classroom = getClassroom(getDivision(), getGrade(), null);

		return classroom;

	}

	/**
	 * Data pool factory for Classroom.
	 * 
	 * @param divisionIddivision
	 *            A valid Division object
	 * @param gradeIdgrade
	 *            A valid Grade object
	 * @param sectionIdsection
	 *            A valid Section object
	 * @return Classroom A Classroom object
	 */
	public static Classroom getClassroom(Division divisionIddivision,
			Grade gradeIdgrade, Section sectionIdsection) {
		Classroom classroom = new Classroom();
		if (divisionIddivision != null) {
			divisionIddivision.addClassroom(classroom);
		}
		if (gradeIdgrade != null) {
			gradeIdgrade.addClassroom(classroom);
		}
		classroom.setModifiedTime(BasicDataGenerator.generateDate());
		if (sectionIdsection != null) {
			sectionIdsection.addClassroom(classroom);
		}
		classroom.setYear(BasicDataGenerator.generateRandomInt());

		return classroom;
	}

	/**
	 * Data pool factory for ClassroomHasStaffHasRole.
	 * 
	 * @return ClassroomHasStaffHasRoleA ClassroomHasStaffHasRole object
	 */
	public static ClassroomHasStaffHasRole getClassroomHasStaffHasRole() {

		ClassroomHasStaffHasRole classroomHasStaffHasRole = new ClassroomHasStaffHasRole();

		classroomHasStaffHasRole.setId(getClassroomHasStaffHasRolePK());

		return classroomHasStaffHasRole;
	}

	/**
	 * Data pool factory for ClassroomHasStaffHasRolePK.
	 * 
	 * @return ClassroomHasStaffHasRolePK A ClassroomHasStaffHasRolePK object
	 */
	public static ClassroomHasStaffHasRolePK getClassroomHasStaffHasRolePK() {

		ClassroomHasStaffHasRolePK classroomHasStaffHasRolePK = getClassroomHasStaffHasRolePK(
				getClassroom(), getStaffHasRole());

		return classroomHasStaffHasRolePK;

	}

	/**
	 * Data pool factory for ClassroomHasStaffHasRolePK.
	 * 
	 * @param classroomIdclassroom
	 *            A valid Classroom object
	 * @param staffHasRoleIdstaffHasRole
	 *            A valid StaffHasRole object
	 * @return ClassroomHasStaffHasRolePK A ClassroomHasStaffHasRolePK object
	 */
	public static ClassroomHasStaffHasRolePK getClassroomHasStaffHasRolePK(
			Classroom classroomIdclassroom,
			StaffHasRole staffHasRoleIdstaffHasRole) {
		ClassroomHasStaffHasRolePK classroomHasStaffHasRolePK = new ClassroomHasStaffHasRolePK();
		classroomHasStaffHasRolePK
				.setClassroomIdclassroom(classroomIdclassroom);
		classroomHasStaffHasRolePK
				.setStaffHasRoleIdstaffHasRole(staffHasRoleIdstaffHasRole);

		return classroomHasStaffHasRolePK;
	}

	/**
	 * Data pool factory for ClassroomModule.
	 * 
	 * @return ClassroomModule A ClassroomModule object
	 */
	public static ClassroomModule getClassroomModule() {

		ClassroomModule classroomModule = getClassroomModule(getClassroom(),
				getModule());

		return classroomModule;

	}

	/**
	 * Data pool factory for ClassroomModule.
	 * 
	 * @param classroomIdclassroom
	 *            A valid Classroom object
	 * @param moduleIdmodule
	 *            A valid Module object
	 * @return ClassroomModule A ClassroomModule object
	 */
	public static ClassroomModule getClassroomModule(
			Classroom classroomIdclassroom, Module moduleIdmodule) {
		ClassroomModule classroomModule = new ClassroomModule();
		if (classroomIdclassroom != null) {
			classroomIdclassroom.addClassroomModule(classroomModule);
		}
		if (moduleIdmodule != null) {
			moduleIdmodule.addClassroomModule(classroomModule);
		}

		return classroomModule;
	}

	/**
	 * Data pool factory for ClassroomModuleHasStaffHasRole.
	 * 
	 * @return ClassroomModuleHasStaffHasRoleA ClassroomModuleHasStaffHasRole
	 *         object
	 */
	public static ClassroomModuleHasStaffHasRole getClassroomModuleHasStaffHasRole() {

		ClassroomModuleHasStaffHasRole classroomModuleHasStaffHasRole = new ClassroomModuleHasStaffHasRole();

		classroomModuleHasStaffHasRole
				.setId(getClassroomModuleHasStaffHasRolePK());

		return classroomModuleHasStaffHasRole;
	}

	/**
	 * Data pool factory for ClassroomModuleHasStaffHasRolePK.
	 * 
	 * @return ClassroomModuleHasStaffHasRolePK A
	 *         ClassroomModuleHasStaffHasRolePK object
	 */
	public static ClassroomModuleHasStaffHasRolePK getClassroomModuleHasStaffHasRolePK() {

		ClassroomModuleHasStaffHasRolePK classroomModuleHasStaffHasRolePK = getClassroomModuleHasStaffHasRolePK(
				getClassroomModule(), getStaffHasRole());

		return classroomModuleHasStaffHasRolePK;

	}

	/**
	 * Data pool factory for ClassroomModuleHasStaffHasRolePK.
	 * 
	 * @param classroomModuleIdclassroomModule
	 *            A valid ClassroomModule object
	 * @param staffHasRoleIdstaffHasRole
	 *            A valid StaffHasRole object
	 * @return ClassroomModuleHasStaffHasRolePK A
	 *         ClassroomModuleHasStaffHasRolePK object
	 */
	public static ClassroomModuleHasStaffHasRolePK getClassroomModuleHasStaffHasRolePK(
			ClassroomModule classroomModuleIdclassroomModule,
			StaffHasRole staffHasRoleIdstaffHasRole) {
		ClassroomModuleHasStaffHasRolePK classroomModuleHasStaffHasRolePK = new ClassroomModuleHasStaffHasRolePK();
		classroomModuleHasStaffHasRolePK
				.setClassroomModuleIdclassroomModule(classroomModuleIdclassroomModule);
		classroomModuleHasStaffHasRolePK
				.setStaffHasRoleIdstaffHasRole(staffHasRoleIdstaffHasRole);

		return classroomModuleHasStaffHasRolePK;
	}

	/**
	 * Data pool factory for ClassroomStudent.
	 * 
	 * @return ClassroomStudent A ClassroomStudent object
	 */
	public static ClassroomStudent getClassroomStudent() {

		ClassroomStudent classroomStudent = getClassroomStudent(getClassroom(),
				getStudent());

		return classroomStudent;

	}

	/**
	 * Data pool factory for ClassroomStudent.
	 * 
	 * @param classroomIdclassroom
	 *            A valid Classroom object
	 * @param studentIdstudent
	 *            A valid Student object
	 * @return ClassroomStudent A ClassroomStudent object
	 */
	public static ClassroomStudent getClassroomStudent(
			Classroom classroomIdclassroom, Student studentIdstudent) {
		ClassroomStudent classroomStudent = new ClassroomStudent();
		if (classroomIdclassroom != null) {
			classroomIdclassroom.addClassroomStudent(classroomStudent);
		}
		if (studentIdstudent != null) {
			studentIdstudent.addClassroomStudent(classroomStudent);
		}

		return classroomStudent;
	}

	/**
	 * Data pool factory for ClassAnalyzerClassifier.
	 * 
	 * @return ClassAnalyzerClassifierA ClassAnalyzerClassifier object
	 */
	public static ClassAnalyzerClassifier getClassAnalyzerClassifier() {

		ClassAnalyzerClassifier classAnalyzerClassifier = new ClassAnalyzerClassifier();

		classAnalyzerClassifier.setBin(BasicDataGenerator.generateRandomInt());
		classAnalyzerClassifier
				.setGrade(BasicDataGenerator.generateRandomInt());
		classAnalyzerClassifier.setId(BasicDataGenerator.generateRandomInt());
		classAnalyzerClassifier.setModel(BasicDataGenerator
				.generateRandomBinary(2147483647));
		classAnalyzerClassifier.setModifiedTime(BasicDataGenerator
				.generateDate());
		classAnalyzerClassifier.setSubject(BasicDataGenerator
				.generateRandomString(100));
		classAnalyzerClassifier.setTerm(BasicDataGenerator.generateRandomInt());
		classAnalyzerClassifier.setType(BasicDataGenerator
				.generateRandomString(500));
		classAnalyzerClassifier.setYear(BasicDataGenerator.generateRandomInt());

		return classAnalyzerClassifier;
	}

	/**
	 * Data pool factory for Division.
	 * 
	 * @return DivisionA Division object
	 */
	public static Division getDivision() {

		Division division = new Division();

		division.setDivision(BasicDataGenerator.generateRandomString(45));

		return division;
	}

	/**
	 * Data pool factory for Exam.
	 * 
	 * @return Exam A Exam object
	 */
	public static Exam getExam() {

		Exam exam = getExam(null, null);

		return exam;

	}

	/**
	 * Data pool factory for Exam.
	 * 
	 * @param classroomModuleIdclassroomModule
	 *            A valid ClassroomModule object
	 * @param examTypeIdexamType
	 *            A valid ExamType object
	 * @return Exam A Exam object
	 */
	public static Exam getExam(
			ClassroomModule classroomModuleIdclassroomModule,
			ExamType examTypeIdexamType) {
		Exam exam = new Exam();
		if (classroomModuleIdclassroomModule != null) {
			classroomModuleIdclassroomModule.addExam(exam);
		}
		exam.setDate(BasicDataGenerator.generateDate());
		if (examTypeIdexamType != null) {
			examTypeIdexamType.addExam(exam);
		}
		exam.setModifiedTime(BasicDataGenerator.generateDate());
		exam.setTerm(BasicDataGenerator.generateRandomInt());

		return exam;
	}

	/**
	 * Data pool factory for ExamSync.
	 * 
	 * @return ExamSync A ExamSync object
	 */
	public static ExamSync getExamSync() {

		ExamSync examSync = getExamSync(getExam());

		return examSync;

	}

	/**
	 * Data pool factory for ExamSync.
	 * 
	 * @param examIdexam
	 *            A valid Exam object
	 * @return ExamSync A ExamSync object
	 */
	public static ExamSync getExamSync(Exam examIdexam) {
		ExamSync examSync = new ExamSync();
		examSync.setClassIdexam(BasicDataGenerator.generateRandomInt());
		if (examIdexam != null) {
			examIdexam.addExamSync(examSync);
		}
		examSync.setModifiedTime(BasicDataGenerator.generateDate());
		examSync.setSyncStatus(BasicDataGenerator.generateRandomInt());

		return examSync;
	}

	/**
	 * Data pool factory for ExamType.
	 * 
	 * @return ExamTypeA ExamType object
	 */
	public static ExamType getExamType() {

		ExamType examType = new ExamType();

		examType.setTypeName(BasicDataGenerator.generateRandomString(45));

		return examType;
	}

	/**
	 * Data pool factory for Grade.
	 * 
	 * @return GradeA Grade object
	 */
	public static Grade getGrade() {

		Grade grade = new Grade();

		grade.setGrade(BasicDataGenerator.generateRandomInt());

		return grade;
	}

	/**
	 * Data pool factory for Marks.
	 * 
	 * @return Marks A Marks object
	 */
	public static Marks getMarks() {

		Marks marks = getMarks(getExam(), getStudent());

		return marks;

	}

	/**
	 * Data pool factory for Marks.
	 * 
	 * @param examIdexam
	 *            A valid Exam object
	 * @param studentIdstudent
	 *            A valid Student object
	 * @return Marks A Marks object
	 */
	public static Marks getMarks(Exam examIdexam, Student studentIdstudent) {
		Marks marks = new Marks();
		if (examIdexam != null) {
			examIdexam.addMarks(marks);
		}
		marks.setIsabsent(BasicDataGenerator.generateRandomInt());
		marks.setMarks(BasicDataGenerator.generateRandomDouble());
		marks.setModifiedTime(BasicDataGenerator.generateDate());
		if (studentIdstudent != null) {
			studentIdstudent.addMarks(marks);
		}

		return marks;
	}

	/**
	 * Data pool factory for Module.
	 * 
	 * @return Module A Module object
	 */
	public static Module getModule() {

		Module module = getModule(getGrade(), getSubject());

		return module;

	}

	/**
	 * Data pool factory for Module.
	 * 
	 * @param gradeIdgrade
	 *            A valid Grade object
	 * @param subjectIdsubject
	 *            A valid Subject object
	 * @return Module A Module object
	 */
	public static Module getModule(Grade gradeIdgrade, Subject subjectIdsubject) {
		Module module = new Module();
		if (gradeIdgrade != null) {
			gradeIdgrade.addModule(module);
		}
		module.setIsOptional(BasicDataGenerator.generateRandomBoolean());
		module.setModifiedTime(BasicDataGenerator.generateDate());
		if (subjectIdsubject != null) {
			subjectIdsubject.addModule(module);
		}

		return module;
	}

	/**
	 * Data pool factory for Results.
	 * 
	 * @return Results A Results object
	 */
	public static Results getResults() {

		Results results = getResults(getExam(), getStudent());

		return results;

	}

	/**
	 * Data pool factory for Results.
	 * 
	 * @param examIdexam
	 *            A valid Exam object
	 * @param studentIdstudent
	 *            A valid Student object
	 * @return Results A Results object
	 */
	public static Results getResults(Exam examIdexam, Student studentIdstudent) {
		Results results = new Results();
		if (examIdexam != null) {
			examIdexam.addResults(results);
		}
		results.setIsabsent(BasicDataGenerator.generateRandomInt());
		results.setModifiedTime(BasicDataGenerator.generateDate());
		results.setResults(BasicDataGenerator.generateRandomString(5));
		if (studentIdstudent != null) {
			studentIdstudent.addResults(results);
		}

		return results;
	}

	/**
	 * Data pool factory for Role.
	 * 
	 * @return RoleA Role object
	 */
	public static Role getRole() {

		Role role = new Role();

		role.setRoleName(BasicDataGenerator.generateRandomString(45));

		return role;
	}

	/**
	 * Data pool factory for School.
	 * 
	 * @return SchoolA School object
	 */
	public static School getSchool() {

		School school = new School();

		school.setAddress(BasicDataGenerator.generateRandomString(45));
		school.setAppKey(BasicDataGenerator.generateRandomString(45));
		school.setDistrict(BasicDataGenerator.generateRandomString(45));
		school.setModifiedTime(BasicDataGenerator.generateDate());
		school.setName(BasicDataGenerator.generateRandomString(45));
		school.setProvince(BasicDataGenerator.generateRandomString(45));
		school.setSchoolNo(BasicDataGenerator.generateRandomInt());
		school.setZone(BasicDataGenerator.generateRandomString(45));

		return school;
	}

	/**
	 * Data pool factory for SchoolHasStaffHasRole.
	 * 
	 * @return SchoolHasStaffHasRoleA SchoolHasStaffHasRole object
	 */
	public static SchoolHasStaffHasRole getSchoolHasStaffHasRole() {

		SchoolHasStaffHasRole schoolHasStaffHasRole = new SchoolHasStaffHasRole();

		schoolHasStaffHasRole.setId(getSchoolHasStaffHasRolePK());

		return schoolHasStaffHasRole;
	}

	/**
	 * Data pool factory for SchoolHasStaffHasRolePK.
	 * 
	 * @return SchoolHasStaffHasRolePK A SchoolHasStaffHasRolePK object
	 */
	public static SchoolHasStaffHasRolePK getSchoolHasStaffHasRolePK() {

		SchoolHasStaffHasRolePK schoolHasStaffHasRolePK = getSchoolHasStaffHasRolePK(
				getSchool(), getStaffHasRole());

		return schoolHasStaffHasRolePK;

	}

	/**
	 * Data pool factory for SchoolHasStaffHasRolePK.
	 * 
	 * @param schoolIdschool
	 *            A valid School object
	 * @param staffHasRoleIdstaffHasRole
	 *            A valid StaffHasRole object
	 * @return SchoolHasStaffHasRolePK A SchoolHasStaffHasRolePK object
	 */
	public static SchoolHasStaffHasRolePK getSchoolHasStaffHasRolePK(
			School schoolIdschool, StaffHasRole staffHasRoleIdstaffHasRole) {
		SchoolHasStaffHasRolePK schoolHasStaffHasRolePK = new SchoolHasStaffHasRolePK();
		schoolHasStaffHasRolePK.setSchoolIdschool(schoolIdschool);
		schoolHasStaffHasRolePK
				.setStaffHasRoleIdstaffHasRole(staffHasRoleIdstaffHasRole);

		return schoolHasStaffHasRolePK;
	}

	/**
	 * Data pool factory for Section.
	 * 
	 * @return SectionA Section object
	 */
	public static Section getSection() {

		Section section = new Section();

		section.setModifiedTime(BasicDataGenerator.generateDate());
		section.setSectionName(BasicDataGenerator.generateRandomString(45));

		return section;
	}

	/**
	 * Data pool factory for SectionHasStaffHasRole.
	 * 
	 * @return SectionHasStaffHasRoleA SectionHasStaffHasRole object
	 */
	public static SectionHasStaffHasRole getSectionHasStaffHasRole() {

		SectionHasStaffHasRole sectionHasStaffHasRole = new SectionHasStaffHasRole();

		sectionHasStaffHasRole.setId(getSectionHasStaffHasRolePK());

		return sectionHasStaffHasRole;
	}

	/**
	 * Data pool factory for SectionHasStaffHasRolePK.
	 * 
	 * @return SectionHasStaffHasRolePK A SectionHasStaffHasRolePK object
	 */
	public static SectionHasStaffHasRolePK getSectionHasStaffHasRolePK() {

		SectionHasStaffHasRolePK sectionHasStaffHasRolePK = getSectionHasStaffHasRolePK(
				getSection(), getStaffHasRole());

		return sectionHasStaffHasRolePK;

	}

	/**
	 * Data pool factory for SectionHasStaffHasRolePK.
	 * 
	 * @param sectionIdsection
	 *            A valid Section object
	 * @param staffHasRoleIdstaffHasRole
	 *            A valid StaffHasRole object
	 * @return SectionHasStaffHasRolePK A SectionHasStaffHasRolePK object
	 */
	public static SectionHasStaffHasRolePK getSectionHasStaffHasRolePK(
			Section sectionIdsection, StaffHasRole staffHasRoleIdstaffHasRole) {
		SectionHasStaffHasRolePK sectionHasStaffHasRolePK = new SectionHasStaffHasRolePK();
		sectionHasStaffHasRolePK.setSectionIdsection(sectionIdsection);
		sectionHasStaffHasRolePK
				.setStaffHasRoleIdstaffHasRole(staffHasRoleIdstaffHasRole);

		return sectionHasStaffHasRolePK;
	}

	/**
	 * Data pool factory for Staff.
	 * 
	 * @return StaffA Staff object
	 */
	public static Staff getStaff() {

		Staff staff = new Staff();

		staff.setFullName(BasicDataGenerator.generateRandomString(100));
		staff.setModifiedTime(BasicDataGenerator.generateDate());
		staff.setName(BasicDataGenerator.generateRandomString(45));
		staff.setPhoto(null);
		staff.setStaffid(BasicDataGenerator.generateRandomString(45));

		return staff;
	}

	/**
	 * Data pool factory for StaffHasRole.
	 * 
	 * @return StaffHasRole A StaffHasRole object
	 */
	public static StaffHasRole getStaffHasRole() {

		StaffHasRole staffHasRole = getStaffHasRole(getRole(), getStaff());

		return staffHasRole;

	}

	/**
	 * Data pool factory for StaffHasRole.
	 * 
	 * @param roleIdrole
	 *            A valid Role object
	 * @param staffIdstaff
	 *            A valid Staff object
	 * @return StaffHasRole A StaffHasRole object
	 */
	public static StaffHasRole getStaffHasRole(Role roleIdrole,
			Staff staffIdstaff) {
		StaffHasRole staffHasRole = new StaffHasRole();
		staffHasRole.setEndDate(BasicDataGenerator.generateDate());
		if (roleIdrole != null) {
			roleIdrole.addStaffHasRole(staffHasRole);
		}
		if (staffIdstaff != null) {
			staffIdstaff.addStaffHasRole(staffHasRole);
		}
		staffHasRole.setStartDate(BasicDataGenerator.generateDate());

		return staffHasRole;
	}

	/**
	 * Data pool factory for Student.
	 * 
	 * @return StudentA Student object
	 */
	public static Student getStudent() {

		Student student = new Student();

		student.setAddress(BasicDataGenerator.generateRandomString(400));
		student.setAdmissionNo(BasicDataGenerator.generateRandomString(45));
		student.setDob(BasicDataGenerator.generateDate());
		student.setFullName(BasicDataGenerator.generateRandomString(45));
		student.setGender(BasicDataGenerator.generateRandomString(10));
		student.setModifiedTime(BasicDataGenerator.generateDate());
		student.setName(BasicDataGenerator.generateRandomString(45));
		student.setNameWtInitial(BasicDataGenerator.generateRandomString(45));
		student.setPhoto(null);

		return student;
	}

	/**
	 * Data pool factory for StudentClassroomModule.
	 * 
	 * @return StudentClassroomModule A StudentClassroomModule object
	 */
	public static StudentClassroomModule getStudentClassroomModule() {

		StudentClassroomModule studentClassroomModule = getStudentClassroomModule(
				getClassroomModule(), getClassroomStudent());

		return studentClassroomModule;

	}

	/**
	 * Data pool factory for StudentClassroomModule.
	 * 
	 * @param classroomModuleIdclassroomModule
	 *            A valid ClassroomModule object
	 * @param classroomStudentIdclassroomStudent
	 *            A valid ClassroomStudent object
	 * @return StudentClassroomModule A StudentClassroomModule object
	 */
	public static StudentClassroomModule getStudentClassroomModule(
			ClassroomModule classroomModuleIdclassroomModule,
			ClassroomStudent classroomStudentIdclassroomStudent) {
		StudentClassroomModule studentClassroomModule = new StudentClassroomModule();
		if (classroomModuleIdclassroomModule != null) {
			classroomModuleIdclassroomModule
					.addStudentClassroomModule(studentClassroomModule);
		}
		if (classroomStudentIdclassroomStudent != null) {
			classroomStudentIdclassroomStudent
					.addStudentClassroomModule(studentClassroomModule);
		}
		studentClassroomModule.setModifiedTime(BasicDataGenerator
				.generateDate());

		return studentClassroomModule;
	}

	/**
	 * Data pool factory for StudentGeneralexamProfile.
	 * 
	 * @return StudentGeneralexamProfile A StudentGeneralexamProfile object
	 */
	public static StudentGeneralexamProfile getStudentGeneralexamProfile() {

		StudentGeneralexamProfile studentGeneralexamProfile = getStudentGeneralexamProfile(getStudent());

		return studentGeneralexamProfile;

	}

	/**
	 * Data pool factory for StudentGeneralexamProfile.
	 * 
	 * @param studentIdstudent
	 *            A valid Student object
	 * @return StudentGeneralexamProfile A StudentGeneralexamProfile object
	 */
	public static StudentGeneralexamProfile getStudentGeneralexamProfile(
			Student studentIdstudent) {
		StudentGeneralexamProfile studentGeneralexamProfile = new StudentGeneralexamProfile();
		studentGeneralexamProfile.setAlIslandRank(BasicDataGenerator
				.generateRandomInt());
		studentGeneralexamProfile.setModifiedTime(BasicDataGenerator
				.generateDate());
		if (studentIdstudent != null) {
			studentIdstudent
					.addStudentGeneralexamProfile(studentGeneralexamProfile);
		}
		studentGeneralexamProfile.setZscore(BasicDataGenerator
				.generateRandomDouble());

		return studentGeneralexamProfile;
	}

	/**
	 * Data pool factory for StudentSync.
	 * 
	 * @return StudentSync A StudentSync object
	 */
	public static StudentSync getStudentSync() {

		StudentSync studentSync = getStudentSync(getStudent());

		return studentSync;

	}

	/**
	 * Data pool factory for StudentSync.
	 * 
	 * @param studentIdstudent
	 *            A valid Student object
	 * @return StudentSync A StudentSync object
	 */
	public static StudentSync getStudentSync(Student studentIdstudent) {
		StudentSync studentSync = new StudentSync();
		studentSync.setClassIdstudent(BasicDataGenerator.generateRandomInt());
		studentSync.setModifiedTime(BasicDataGenerator.generateDate());
		if (studentIdstudent != null) {
			studentIdstudent.addStudentSync(studentSync);
		}
		studentSync.setSyncStatus(BasicDataGenerator.generateRandomInt());

		return studentSync;
	}

	/**
	 * Data pool factory for Subject.
	 * 
	 * @return SubjectA Subject object
	 */
	public static Subject getSubject() {

		Subject subject = new Subject();

		subject.setModifiedTime(BasicDataGenerator.generateDate());
		subject.setSubjectCode(BasicDataGenerator.generateRandomString(100));
		subject.setSubjectName(BasicDataGenerator.generateRandomString(100));

		return subject;
	}

	/**
	 * Data pool factory for User.
	 * 
	 * @return User A User object
	 */
	public static User getUser() {

		User user = getUser(getUserRole());

		return user;

	}

	/**
	 * Data pool factory for User.
	 * 
	 * @param userRoleIduserRole
	 *            A valid UserRole object
	 * @return User A User object
	 */
	public static User getUser(UserRole userRoleIduserRole) {
		User user = new User();
		user.setEmail(BasicDataGenerator.generateRandomString(45));
		user.setModifiedTime(BasicDataGenerator.generateDate());
		user.setPassword(BasicDataGenerator.generateRandomString(45));
		user.setUserName(BasicDataGenerator.generateRandomString(45));
		if (userRoleIduserRole != null) {
			userRoleIduserRole.addUser(user);
		}

		return user;
	}

	/**
	 * Data pool factory for UserRole.
	 * 
	 * @return UserRoleA UserRole object
	 */
	public static UserRole getUserRole() {

		UserRole userRole = new UserRole();

		userRole.setName(BasicDataGenerator.generateRandomString(45));

		return userRole;
	}

	/**
	 * Returns the commit order of this database. Useful for iterating through
	 * the classes for deletion in the right order.
	 * 
	 * @return String[] list of classes
	 */
	public static String[] getDBCommitOrder() {
		return commitOrder;
	}

	/**
	 * @param className
	 *            classname to return
	 * @return the tabledeps for the given class name
	 */
	public static Collection<String> getTabledeps(String className) {
		return tableDeps.get(className);
	}

}
