package org.yarlithub.yschool.repository.model.obj.yschool;

import com.felees.hbnpojogen.persistence.IPojoGenEntity;
import java.io.Serializable;
import java.util.Collections;
import java.util.Date;
import java.util.HashSet;
import java.util.Map;
import java.util.Set;
import java.util.WeakHashMap;
import javax.persistence.Basic;
import javax.persistence.CascadeType;
import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.GeneratedValue;
import javax.persistence.GenerationType;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.ManyToOne;
import javax.persistence.OneToMany;
import javax.persistence.Table;
import javax.persistence.Transient;
import org.hibernate.proxy.HibernateProxy;
import org.yarlithub.yschool.repository.model.obj.yschool.ClassroomModule;
import org.yarlithub.yschool.repository.model.obj.yschool.iface.IModule;


/** 
 * Object mapping for hibernate-handled table: module.
 * @author autogenerated
 */

@Entity
@Table(name = "module", schema = "rpgm")
public class Module implements Cloneable, Serializable, IPojoGenEntity, IModule {

	/** Serial Version UID. */
	private static final long serialVersionUID = -558977424L;

	/** Use a WeakHashMap so entries will be garbage collected once all entities 
		referring to a saved hash are garbage collected themselves. */
	private static final Map<Serializable, Integer> SAVED_HASHES =
		Collections.synchronizedMap(new WeakHashMap<Serializable, Integer>());
	
	/** hashCode temporary storage. */
	private volatile Integer hashCode;
	

	/** Field mapping. */
	private Set<ClassroomModule> classroomModules = new HashSet<ClassroomModule>();

	/** Field mapping. */
	private Grade gradeIdgrade;
	/** Field mapping. */
	private Integer id = 0; // init for hibernate bug workaround
	/** Field mapping. */
	private Boolean isOptional;
	/** Field mapping. */
	private Date modifiedTime;
	/** Field mapping. */
	private Subject subjectIdsubject;
	/**
	 * Default constructor, mainly for hibernate use.
	 */
	public Module() {
		// Default constructor
	} 

	/** Constructor taking a given ID.
	 * @param id to set
	 */
	public Module(Integer id) {
		this.id = id;
	}
	
	/** Constructor taking a given ID.
	 * @param gradeIdgrade Grade object;
	 * @param id Integer object;
	 * @param modifiedTime Date object;
	 * @param subjectIdsubject Subject object;
	 */
	public Module(Grade gradeIdgrade, Integer id, Date modifiedTime, 					
			Subject subjectIdsubject) {

		this.gradeIdgrade = gradeIdgrade;
		this.id = id;
		this.modifiedTime = modifiedTime;
		this.subjectIdsubject = subjectIdsubject;
	}
	
 


 
	/** Return the type of this class. Useful for when dealing with proxies.
	* @return Defining class.
	*/
	@Transient
	public Class<?> getClassType() {
		return Module.class;
	}
 

    /**
     * Return the value associated with the column: classroomModule.
	 * @return A Set&lt;ClassroomModule&gt; object (this.classroomModule)
	 */
 	@OneToMany( fetch = FetchType.LAZY, cascade = { CascadeType.PERSIST, CascadeType.MERGE }, mappedBy = "moduleIdmodule"  )
 	@org.hibernate.annotations.Cascade({org.hibernate.annotations.CascadeType.SAVE_UPDATE})
	@Basic( optional = false )
	@Column( nullable = false  )
	public Set<ClassroomModule> getClassroomModules() {
		return this.classroomModules;
		
	}
	
	/**
	 * Adds a bi-directional link of type ClassroomModule to the classroomModules set.
	 * @param classroomModule item to add
	 */
	public void addClassroomModule(ClassroomModule classroomModule) {
		classroomModule.setModuleIdmodule(this);
		this.classroomModules.add(classroomModule);
	}

  
    /**  
     * Set the value related to the column: classroomModule.
	 * @param classroomModule the classroomModule value you wish to set
	 */
	public void setClassroomModules(final Set<ClassroomModule> classroomModule) {
		this.classroomModules = classroomModule;
	}

    /**
     * Return the value associated with the column: gradeIdgrade.
	 * @return A Grade object (this.gradeIdgrade)
	 */
	@ManyToOne( cascade = { CascadeType.PERSIST, CascadeType.MERGE }, fetch = FetchType.LAZY )
	@org.hibernate.annotations.Cascade({org.hibernate.annotations.CascadeType.SAVE_UPDATE})
	@Basic( optional = false )
	@JoinColumn(name = "grade_idgrade", nullable = false )
	public Grade getGradeIdgrade() {
		return this.gradeIdgrade;
		
	}
	

  
    /**  
     * Set the value related to the column: gradeIdgrade.
	 * @param gradeIdgrade the gradeIdgrade value you wish to set
	 */
	public void setGradeIdgrade(final Grade gradeIdgrade) {
		this.gradeIdgrade = gradeIdgrade;
	}

    /**
     * Return the value associated with the column: id.
	 * @return A Integer object (this.id)
	 */
    @Id 
	@GeneratedValue(strategy = GenerationType.AUTO)
	@Basic( optional = false )
	@Column( name = "idmodule", nullable = false  )
	public Integer getId() {
		return this.id;
		
	}
	

  
    /**  
     * Set the value related to the column: id.
	 * @param id the id value you wish to set
	 */
	public void setId(final Integer id) {
		// If we've just been persisted and hashCode has been
		// returned then make sure other entities with this
		// ID return the already returned hash code
		if ( (this.id == null || this.id == 0) &&
				(id != null) &&
				(this.hashCode != null) ) {
		SAVED_HASHES.put( id, this.hashCode );
		}
		this.id = id;
	}

    /**
     * Return the value associated with the column: isOptional.
	 * @return A Boolean object (this.isOptional)
	 */
	@Basic( optional = true )
	@Column( name = "is_optional"  )
	public Boolean isIsOptional() {
		return this.isOptional;
		
	}
	

  
    /**  
     * Set the value related to the column: isOptional.
	 * @param isOptional the isOptional value you wish to set
	 */
	public void setIsOptional(final Boolean isOptional) {
		this.isOptional = isOptional;
	}

    /**
     * Return the value associated with the column: modifiedTime.
	 * @return A Date object (this.modifiedTime)
	 */
	@Basic( optional = false )
	@Column( name = "modified_time", nullable = false  )
	public Date getModifiedTime() {
		return this.modifiedTime;
		
	}
	

  
    /**  
     * Set the value related to the column: modifiedTime.
	 * @param modifiedTime the modifiedTime value you wish to set
	 */
	public void setModifiedTime(final Date modifiedTime) {
		this.modifiedTime = modifiedTime;
	}

    /**
     * Return the value associated with the column: subjectIdsubject.
	 * @return A Subject object (this.subjectIdsubject)
	 */
	@ManyToOne( cascade = { CascadeType.PERSIST, CascadeType.MERGE }, fetch = FetchType.LAZY )
	@org.hibernate.annotations.Cascade({org.hibernate.annotations.CascadeType.SAVE_UPDATE})
	@Basic( optional = false )
	@JoinColumn(name = "subject_idsubject", nullable = false )
	public Subject getSubjectIdsubject() {
		return this.subjectIdsubject;
		
	}
	

  
    /**  
     * Set the value related to the column: subjectIdsubject.
	 * @param subjectIdsubject the subjectIdsubject value you wish to set
	 */
	public void setSubjectIdsubject(final Subject subjectIdsubject) {
		this.subjectIdsubject = subjectIdsubject;
	}


   /**
    * Deep copy.
	* @return cloned object
	* @throws CloneNotSupportedException on error
    */
    @Override
    public Module clone() throws CloneNotSupportedException {
		
        final Module copy = (Module)super.clone();

		if (this.getClassroomModules() != null) {
			copy.getClassroomModules().addAll(this.getClassroomModules());
		}
		copy.setGradeIdgrade(this.getGradeIdgrade());
		copy.setId(this.getId());
		copy.setIsOptional(this.isIsOptional());
		copy.setModifiedTime(this.getModifiedTime());
		copy.setSubjectIdsubject(this.getSubjectIdsubject());
		return copy;
	}
	


	/** Provides toString implementation.
	 * @see java.lang.Object#toString()
	 * @return String representation of this class.
	 */
	@Override
	public String toString() {
		StringBuffer sb = new StringBuffer();
		
		sb.append("id: " + this.getId() + ", ");
		sb.append("isOptional: " + this.isIsOptional() + ", ");
		sb.append("modifiedTime: " + this.getModifiedTime() + ", ");
		return sb.toString();		
	}


	/** Equals implementation. 
	 * @see java.lang.Object#equals(java.lang.Object)
	 * @param aThat Object to compare with
	 * @return true/false
	 */
	@Override
	public boolean equals(final Object aThat) {
		Object proxyThat = aThat;
		
		if ( this == aThat ) {
			 return true;
		}

		
		if (aThat instanceof HibernateProxy) {
 			// narrow down the proxy to the class we are dealing with.
 			try {
				proxyThat = ((HibernateProxy) aThat).getHibernateLazyInitializer().getImplementation(); 
			} catch (org.hibernate.ObjectNotFoundException e) {
				return false;
		   	}
		}
		if (aThat == null)  {
			 return false;
		}
		
		final Module that; 
		try {
			that = (Module) proxyThat;
			if ( !(that.getClassType().equals(this.getClassType()))){
				return false;
			}
		} catch (org.hibernate.ObjectNotFoundException e) {
				return false;
		} catch (ClassCastException e) {
				return false;
		}
		
		
		boolean result = true;
		result = result && (((this.getId() == null) && ( that.getId() == null)) || (this.getId() != null  && this.getId().equals(that.getId())));
		result = result && (((getGradeIdgrade() == null) && (that.getGradeIdgrade() == null)) || (getGradeIdgrade() != null && getGradeIdgrade().getId().equals(that.getGradeIdgrade().getId())));	
		result = result && (((isIsOptional() == null) && (that.isIsOptional() == null)) || (isIsOptional() != null && isIsOptional().equals(that.isIsOptional())));
		result = result && (((getModifiedTime() == null) && (that.getModifiedTime() == null)) || (getModifiedTime() != null && getModifiedTime().equals(that.getModifiedTime())));
		result = result && (((getSubjectIdsubject() == null) && (that.getSubjectIdsubject() == null)) || (getSubjectIdsubject() != null && getSubjectIdsubject().getId().equals(that.getSubjectIdsubject().getId())));	
		return result;
	}
	
	/** Calculate the hashcode.
	 * @see java.lang.Object#hashCode()
	 * @return a calculated number
	 */
	@Override
	public int hashCode() {
		if ( this.hashCode == null ) {
			synchronized ( this ) {
				if ( this.hashCode == null ) {
					Integer newHashCode = null;

					if ( getId() != null ) {
					newHashCode = SAVED_HASHES.get( getId() );
					}
					
					if ( newHashCode == null ) {
						if ( getId() != null && getId() != 0) {
							newHashCode = getId();
						} else {

						}
					}
					
					this.hashCode = newHashCode;
				}
			}
		}
	return this.hashCode;
	}
	

	
}
