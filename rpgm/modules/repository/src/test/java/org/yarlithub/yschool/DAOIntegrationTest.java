//package org.yarlithub.yschool;
//
//import org.junit.Assert;
//import org.junit.Test;
//
//
//import org.yarlithub.yschool.repository.factories.yschool.*;
//import org.yarlithub.yschool.repository.model.obj.yschool.*;
//import org.yarlithub.yschool.repository.services.data.DataLayerYschool;
//import org.yarlithub.yschool.repository.services.data.DataLayerYschoolImpl;
//import org.springframework.test.context.ContextConfiguration;
//import org.springframework.test.context.junit4.SpringJUnit4ClassRunner;
//import org.junit.runner.RunWith;
//import org.springframework.transaction.annotation.Transactional;
//
///** Hibernate tester.
//* @author autogenerated
//*/
//@SuppressWarnings("cast")
//@ContextConfiguration(locations = { "/applicationContext.xml" } )
//@RunWith(SpringJUnit4ClassRunner.class)
//public class DAOIntegrationTest {
//
//
//	/**
//	 * Clears the database.
//	 */
//	@Test
//	@Transactional
//	public void testPreCleanDBFirstPass() {
//		// We'll ignore any exceptions in this pass to give time for the custom exec to execute too
//		// (+ clear out any DB loops)
//
//		try{HibernateYschoolDaoFactory.getUserDao().getQuery("delete from User").executeUpdate(); } catch (Exception e) { /* do nothing */ }
//		try{HibernateYschoolDaoFactory.getStudentClassroomSubjectDao().getQuery("delete from StudentClassroomSubject").executeUpdate(); } catch (Exception e) { /* do nothing */ }
//		try{HibernateYschoolDaoFactory.getSectionHasStaffHasRoleDao().getQuery("delete from SectionHasStaffHasRole").executeUpdate(); } catch (Exception e) { /* do nothing */ }
//		try{HibernateYschoolDaoFactory.getSchoolHasStaffHasRoleDao().getQuery("delete from SchoolHasStaffHasRole").executeUpdate(); } catch (Exception e) { /* do nothing */ }
//		try{HibernateYschoolDaoFactory.getResultsDao().getQuery("delete from Results").executeUpdate(); } catch (Exception e) { /* do nothing */ }
//		try{HibernateYschoolDaoFactory.getMarksDao().getQuery("delete from Marks").executeUpdate(); } catch (Exception e) { /* do nothing */ }
//		try{HibernateYschoolDaoFactory.getClassroomSubjectHasStaffHasRoleDao().getQuery("delete from ClassroomSubjectHasStaffHasRole").executeUpdate(); } catch (Exception e) { /* do nothing */ }
//		try{HibernateYschoolDaoFactory.getClassroomSubjectDao().getQuery("delete from ClassroomSubject").executeUpdate(); } catch (Exception e) { /* do nothing */ }
//		try{HibernateYschoolDaoFactory.getClassroomStudentDao().getQuery("delete from ClassroomStudent").executeUpdate(); } catch (Exception e) { /* do nothing */ }
//		try{HibernateYschoolDaoFactory.getClassroomHasStaffHasRoleDao().getQuery("delete from ClassroomHasStaffHasRole").executeUpdate(); } catch (Exception e) { /* do nothing */ }
//		try{HibernateYschoolDaoFactory.getUserRoleDao().getQuery("delete from UserRole").executeUpdate(); } catch (Exception e) { /* do nothing */ }
//		try{HibernateYschoolDaoFactory.getSubjectDao().getQuery("delete from Subject").executeUpdate(); } catch (Exception e) { /* do nothing */ }
//		try{HibernateYschoolDaoFactory.getStudentDao().getQuery("delete from Student").executeUpdate(); } catch (Exception e) { /* do nothing */ }
//		try{HibernateYschoolDaoFactory.getStaffHasRoleDao().getQuery("delete from StaffHasRole").executeUpdate(); } catch (Exception e) { /* do nothing */ }
//		try{HibernateYschoolDaoFactory.getStaffDao().getQuery("delete from Staff").executeUpdate(); } catch (Exception e) { /* do nothing */ }
//		try{HibernateYschoolDaoFactory.getSectionDao().getQuery("delete from Section").executeUpdate(); } catch (Exception e) { /* do nothing */ }
//		try{HibernateYschoolDaoFactory.getSchoolDao().getQuery("delete from School").executeUpdate(); } catch (Exception e) { /* do nothing */ }
//		try{HibernateYschoolDaoFactory.getRoleDao().getQuery("delete from Role").executeUpdate(); } catch (Exception e) { /* do nothing */ }
//		try{HibernateYschoolDaoFactory.getExamTypeDao().getQuery("delete from ExamType").executeUpdate(); } catch (Exception e) { /* do nothing */ }
//		try{HibernateYschoolDaoFactory.getExamDao().getQuery("delete from Exam").executeUpdate(); } catch (Exception e) { /* do nothing */ }
//		try{HibernateYschoolDaoFactory.getClassroomDao().getQuery("delete from Classroom").executeUpdate(); } catch (Exception e) { /* do nothing */ }
//
//
//
//	}
//	/**
//	 * Clears the database.
//	 */
//	@Test
//	@Transactional
//	public void testPreCleanDBFinalPass() {
//
//		HibernateYschoolDaoFactory.getUserDao().getQuery("delete from User").executeUpdate();
//		HibernateYschoolDaoFactory.getStudentClassroomSubjectDao().getQuery("delete from StudentClassroomSubject").executeUpdate();
//		HibernateYschoolDaoFactory.getSectionHasStaffHasRoleDao().getQuery("delete from SectionHasStaffHasRole").executeUpdate();
//		HibernateYschoolDaoFactory.getSchoolHasStaffHasRoleDao().getQuery("delete from SchoolHasStaffHasRole").executeUpdate();
//		HibernateYschoolDaoFactory.getResultsDao().getQuery("delete from Results").executeUpdate();
//		HibernateYschoolDaoFactory.getMarksDao().getQuery("delete from Marks").executeUpdate();
//		HibernateYschoolDaoFactory.getClassroomSubjectHasStaffHasRoleDao().getQuery("delete from ClassroomSubjectHasStaffHasRole").executeUpdate();
//		HibernateYschoolDaoFactory.getClassroomSubjectDao().getQuery("delete from ClassroomSubject").executeUpdate();
//		HibernateYschoolDaoFactory.getClassroomStudentDao().getQuery("delete from ClassroomStudent").executeUpdate();
//		HibernateYschoolDaoFactory.getClassroomHasStaffHasRoleDao().getQuery("delete from ClassroomHasStaffHasRole").executeUpdate();
//		HibernateYschoolDaoFactory.getUserRoleDao().getQuery("delete from UserRole").executeUpdate();
//		HibernateYschoolDaoFactory.getSubjectDao().getQuery("delete from Subject").executeUpdate();
//		HibernateYschoolDaoFactory.getStudentDao().getQuery("delete from Student").executeUpdate();
//		HibernateYschoolDaoFactory.getStaffHasRoleDao().getQuery("delete from StaffHasRole").executeUpdate();
//		HibernateYschoolDaoFactory.getStaffDao().getQuery("delete from Staff").executeUpdate();
//		HibernateYschoolDaoFactory.getSectionDao().getQuery("delete from Section").executeUpdate();
//		HibernateYschoolDaoFactory.getSchoolDao().getQuery("delete from School").executeUpdate();
//		HibernateYschoolDaoFactory.getRoleDao().getQuery("delete from Role").executeUpdate();
//		HibernateYschoolDaoFactory.getExamTypeDao().getQuery("delete from ExamType").executeUpdate();
//		HibernateYschoolDaoFactory.getExamDao().getQuery("delete from Exam").executeUpdate();
//		HibernateYschoolDaoFactory.getClassroomDao().getQuery("delete from Classroom").executeUpdate();
//
//
//
//	}
//
//
//	/**
//	 * Hibernate test case for table: yschool.classroom.
//	 * @throws CloneNotSupportedException on clone error
//	 */
//	@Transactional
//	@Test
//	public void testClassroom() throws CloneNotSupportedException {
//
//	 	DataLayerYschool dataLayerYschool = DataLayerYschoolImpl.getInstance();
//		Classroom classroom = YschoolDataPoolFactory.getClassroom();
//		dataLayerYschool.saveOrUpdate(classroom);
//
//		Integer classroomId = classroom.getId();
//		Classroom copy = classroom.clone();
//		dataLayerYschool.flushSession(); // flush+evict from cache to make sure we hit the DB next
//		dataLayerYschool.evict(classroom);
//
//		classroom = dataLayerYschool.getClassroom(classroomId); 	// load it again
//
//
//		// Validity checks
//		Assert.assertNotNull(copy);
//		// null equals check
//		Assert.assertFalse(copy.equals(null));
//
//		Assert.assertEquals(copy.getDivision(), classroom.getDivision());
//		Assert.assertEquals(copy.getGrade(), classroom.getGrade());
//		Assert.assertEquals(copy.getYear(), classroom.getYear());
//		// tests for coverage completeness
//		Assert.assertFalse(classroom.toString().equals(""));
//		Assert.assertEquals(copy, copy.clone());
//		// symmetric equality check
//		Assert.assertEquals(copy.clone(), copy);
//		// reflexive equality check
//		Assert.assertEquals(copy, copy);
//		// hashcode on identical object should return same number
//		Assert.assertEquals(classroom.hashCode(), copy.hashCode());
//		Assert.assertNotSame(copy, 0L);
//	  // End of table
//	}
//	/**
//	 * Hibernate test case for table: yschool.classroom_has_staff_has_role.
//	 * @throws CloneNotSupportedException on clone error
//	 */
//	@Transactional
//	@Test
//	public void testClassroomHasStaffHasRole() throws CloneNotSupportedException {
//
//	 	DataLayerYschool dataLayerYschool = DataLayerYschoolImpl.getInstance();
//		ClassroomHasStaffHasRole classroomHasStaffHasRole = YschoolDataPoolFactory.getClassroomHasStaffHasRole();
//		// Cascading on this property was switched off from config (or requires hbn bug workaround). Performing manual cascade.
//		org.yarlithub.yschool.repository.factories.yschool.HibernateYschoolDaoFactory.getClassroomDao().saveOrUpdate(((org.yarlithub.yschool.repository.model.obj.yschool.ClassroomHasStaffHasRolePK)classroomHasStaffHasRole.getId()).getClassroomIdclass());
//		// Cascading on this property was switched off from config (or requires hbn bug workaround). Performing manual cascade.
//		org.yarlithub.yschool.repository.factories.yschool.HibernateYschoolDaoFactory.getStaffHasRoleDao().saveOrUpdate(((org.yarlithub.yschool.repository.model.obj.yschool.ClassroomHasStaffHasRolePK)classroomHasStaffHasRole.getId()).getStaffHasRoleIdstaffHasRole());
//		dataLayerYschool.saveOrUpdate(classroomHasStaffHasRole);
//
//		ClassroomHasStaffHasRolePK classroomHasStaffHasRoleId = classroomHasStaffHasRole.getId();
//		ClassroomHasStaffHasRole copy = classroomHasStaffHasRole.clone();
//		dataLayerYschool.flushSession(); // flush+evict from cache to make sure we hit the DB next
//		dataLayerYschool.evict(classroomHasStaffHasRole);
//
//		classroomHasStaffHasRole = dataLayerYschool.getClassroomHasStaffHasRole(classroomHasStaffHasRoleId); 	// load it again
//
//
//		// Validity checks
//		Assert.assertNotNull(copy);
//		// null equals check
//		Assert.assertFalse(copy.equals(null));
//
//		Assert.assertEquals(copy.getId(), classroomHasStaffHasRole.getId());
//		// tests for coverage completeness
//		Assert.assertFalse(classroomHasStaffHasRole.toString().equals(""));
//		Assert.assertEquals(copy, copy.clone());
//		// symmetric equality check
//		Assert.assertEquals(copy.clone(), copy);
//		// reflexive equality check
//		Assert.assertEquals(copy, copy);
//		// hashcode on identical object should return same number
//		Assert.assertEquals(classroomHasStaffHasRole.hashCode(), copy.hashCode());
//		Assert.assertNotSame(copy, 0L);
//	  // End of table
//	}
//	/**
//	 * Hibernate test case for table: yschool.classroom_student.
//	 * @throws CloneNotSupportedException on clone error
//	 */
//	@Transactional
//	@Test
//	public void testClassroomStudent() throws CloneNotSupportedException {
//
//	 	DataLayerYschool dataLayerYschool = DataLayerYschoolImpl.getInstance();
//		ClassroomStudent classroomStudent = YschoolDataPoolFactory.getClassroomStudent();
//		dataLayerYschool.saveOrUpdate(classroomStudent);
//
//		Integer classroomStudentId = classroomStudent.getId();
//		ClassroomStudent copy = classroomStudent.clone();
//		dataLayerYschool.flushSession(); // flush+evict from cache to make sure we hit the DB next
//		dataLayerYschool.evict(classroomStudent);
//
//		classroomStudent = dataLayerYschool.getClassroomStudent(classroomStudentId); 	// load it again
//
//
//		// Validity checks
//		Assert.assertNotNull(copy);
//		// null equals check
//		Assert.assertFalse(copy.equals(null));
//
//		Assert.assertEquals(copy.getClassroomIdclass().getId(), classroomStudent.getClassroomIdclass().getId());
//		Assert.assertEquals(copy.getStudentIdstudent().getId(), classroomStudent.getStudentIdstudent().getId());
//		// tests for coverage completeness
//		Assert.assertFalse(classroomStudent.toString().equals(""));
//		Assert.assertEquals(copy, copy.clone());
//		// symmetric equality check
//		Assert.assertEquals(copy.clone(), copy);
//		// reflexive equality check
//		Assert.assertEquals(copy, copy);
//		// hashcode on identical object should return same number
//		Assert.assertEquals(classroomStudent.hashCode(), copy.hashCode());
//		Assert.assertNotSame(copy, 0L);
//	  // End of table
//	}
//	/**
//	 * Hibernate test case for table: yschool.classroom_subject.
//	 * @throws CloneNotSupportedException on clone error
//	 */
//	@Transactional
//	@Test
//	public void testClassroomSubject() throws CloneNotSupportedException {
//
//	 	DataLayerYschool dataLayerYschool = DataLayerYschoolImpl.getInstance();
//		ClassroomSubject classroomSubject = YschoolDataPoolFactory.getClassroomSubject();
//		dataLayerYschool.saveOrUpdate(classroomSubject);
//
//		Integer classroomSubjectId = classroomSubject.getId();
//		ClassroomSubject copy = classroomSubject.clone();
//		dataLayerYschool.flushSession(); // flush+evict from cache to make sure we hit the DB next
//		dataLayerYschool.evict(classroomSubject);
//
//		classroomSubject = dataLayerYschool.getClassroomSubject(classroomSubjectId); 	// load it again
//
//
//		// Validity checks
//		Assert.assertNotNull(copy);
//		// null equals check
//		Assert.assertFalse(copy.equals(null));
//
//		Assert.assertEquals(copy.getClassroomIdclass().getId(), classroomSubject.getClassroomIdclass().getId());
//		Assert.assertEquals(copy.getSubjectIdsubject().getId(), classroomSubject.getSubjectIdsubject().getId());
//		// tests for coverage completeness
//		Assert.assertFalse(classroomSubject.toString().equals(""));
//		Assert.assertEquals(copy, copy.clone());
//		// symmetric equality check
//		Assert.assertEquals(copy.clone(), copy);
//		// reflexive equality check
//		Assert.assertEquals(copy, copy);
//		// hashcode on identical object should return same number
//		Assert.assertEquals(classroomSubject.hashCode(), copy.hashCode());
//		Assert.assertNotSame(copy, 0L);
//	  // End of table
//	}
//	/**
//	 * Hibernate test case for table: yschool.classroom_subject_has_staff_has_role.
//	 * @throws CloneNotSupportedException on clone error
//	 */
//	@Transactional
//	@Test
//	public void testClassroomSubjectHasStaffHasRole() throws CloneNotSupportedException {
//
//	 	DataLayerYschool dataLayerYschool = DataLayerYschoolImpl.getInstance();
//		ClassroomSubjectHasStaffHasRole classroomSubjectHasStaffHasRole = YschoolDataPoolFactory.getClassroomSubjectHasStaffHasRole();
//		// Cascading on this property was switched off from config (or requires hbn bug workaround). Performing manual cascade.
//		org.yarlithub.yschool.repository.factories.yschool.HibernateYschoolDaoFactory.getClassroomSubjectDao().saveOrUpdate(((org.yarlithub.yschool.repository.model.obj.yschool.ClassroomSubjectHasStaffHasRolePK)classroomSubjectHasStaffHasRole.getId()).getClassroomSubjectIdclassroomSubject());
//		// Cascading on this property was switched off from config (or requires hbn bug workaround). Performing manual cascade.
//		org.yarlithub.yschool.repository.factories.yschool.HibernateYschoolDaoFactory.getStaffHasRoleDao().saveOrUpdate(((org.yarlithub.yschool.repository.model.obj.yschool.ClassroomSubjectHasStaffHasRolePK)classroomSubjectHasStaffHasRole.getId()).getStaffHasRoleIdstaffHasRole());
//		dataLayerYschool.saveOrUpdate(classroomSubjectHasStaffHasRole);
//
//		ClassroomSubjectHasStaffHasRolePK classroomSubjectHasStaffHasRoleId = classroomSubjectHasStaffHasRole.getId();
//		ClassroomSubjectHasStaffHasRole copy = classroomSubjectHasStaffHasRole.clone();
//		dataLayerYschool.flushSession(); // flush+evict from cache to make sure we hit the DB next
//		dataLayerYschool.evict(classroomSubjectHasStaffHasRole);
//
//		classroomSubjectHasStaffHasRole = dataLayerYschool.getClassroomSubjectHasStaffHasRole(classroomSubjectHasStaffHasRoleId); 	// load it again
//
//
//		// Validity checks
//		Assert.assertNotNull(copy);
//		// null equals check
//		Assert.assertFalse(copy.equals(null));
//
//		Assert.assertEquals(copy.getId(), classroomSubjectHasStaffHasRole.getId());
//		// tests for coverage completeness
//		Assert.assertFalse(classroomSubjectHasStaffHasRole.toString().equals(""));
//		Assert.assertEquals(copy, copy.clone());
//		// symmetric equality check
//		Assert.assertEquals(copy.clone(), copy);
//		// reflexive equality check
//		Assert.assertEquals(copy, copy);
//		// hashcode on identical object should return same number
//		Assert.assertEquals(classroomSubjectHasStaffHasRole.hashCode(), copy.hashCode());
//		Assert.assertNotSame(copy, 0L);
//	  // End of table
//	}
//	/**
//	 * Hibernate test case for table: yschool.exam.
//	 * @throws CloneNotSupportedException on clone error
//	 */
//	@Transactional
//	@Test
//	public void testExam() throws CloneNotSupportedException {
//
//	 	DataLayerYschool dataLayerYschool = DataLayerYschoolImpl.getInstance();
//		Exam exam = YschoolDataPoolFactory.getExam();
//		dataLayerYschool.saveOrUpdate(exam);
//
//		Integer examId = exam.getId();
//		Exam copy = exam.clone();
//		dataLayerYschool.flushSession(); // flush+evict from cache to make sure we hit the DB next
//		dataLayerYschool.evict(exam);
//
//		exam = dataLayerYschool.getExam(examId); 	// load it again
//
//
//		// Validity checks
//		Assert.assertNotNull(copy);
//		// null equals check
//		Assert.assertFalse(copy.equals(null));
//
//		Assert.assertEquals(new java.text.SimpleDateFormat("dd/MM/yyyy").format(copy.getDate().getTime()), new java.text.SimpleDateFormat("dd/MM/yyyy").format(exam.getDate().getTime()));
//		Assert.assertEquals(copy.getTerm(), exam.getTerm());
//		// tests for coverage completeness
//		Assert.assertFalse(exam.toString().equals(""));
//		Assert.assertEquals(copy, copy.clone());
//		// symmetric equality check
//		Assert.assertEquals(copy.clone(), copy);
//		// reflexive equality check
//		Assert.assertEquals(copy, copy);
//		// hashcode on identical object should return same number
//		Assert.assertEquals(exam.hashCode(), copy.hashCode());
//		Assert.assertNotSame(copy, 0L);
//	  // End of table
//	}
//	/**
//	 * Hibernate test case for table: yschool.exam_type.
//	 * @throws CloneNotSupportedException on clone error
//	 */
//	@Transactional
//	@Test
//	public void testExamType() throws CloneNotSupportedException {
//
//	 	DataLayerYschool dataLayerYschool = DataLayerYschoolImpl.getInstance();
//		ExamType examType = YschoolDataPoolFactory.getExamType();
//		dataLayerYschool.saveOrUpdate(examType);
//
//		Integer examTypeId = examType.getId();
//		ExamType copy = examType.clone();
//		dataLayerYschool.flushSession(); // flush+evict from cache to make sure we hit the DB next
//		dataLayerYschool.evict(examType);
//
//		examType = dataLayerYschool.getExamType(examTypeId); 	// load it again
//
//
//		// Validity checks
//		Assert.assertNotNull(copy);
//		// null equals check
//		Assert.assertFalse(copy.equals(null));
//
//		Assert.assertEquals(copy.getTypeName(), examType.getTypeName());
//		// tests for coverage completeness
//		Assert.assertFalse(examType.toString().equals(""));
//		Assert.assertEquals(copy, copy.clone());
//		// symmetric equality check
//		Assert.assertEquals(copy.clone(), copy);
//		// reflexive equality check
//		Assert.assertEquals(copy, copy);
//		// hashcode on identical object should return same number
//		Assert.assertEquals(examType.hashCode(), copy.hashCode());
//		Assert.assertNotSame(copy, 0L);
//	  // End of table
//	}
//	/**
//	 * Hibernate test case for table: yschool.marks.
//	 * @throws CloneNotSupportedException on clone error
//	 */
//	@Transactional
//	@Test
//	public void testMarks() throws CloneNotSupportedException {
//
//	 	DataLayerYschool dataLayerYschool = DataLayerYschoolImpl.getInstance();
//		Marks marks = YschoolDataPoolFactory.getMarks();
//		dataLayerYschool.saveOrUpdate(marks);
//
//		Integer marksId = marks.getId();
//		Marks copy = marks.clone();
//		dataLayerYschool.flushSession(); // flush+evict from cache to make sure we hit the DB next
//		dataLayerYschool.evict(marks);
//
//		marks = dataLayerYschool.getMarks(marksId); 	// load it again
//
//
//		// Validity checks
//		Assert.assertNotNull(copy);
//		// null equals check
//		Assert.assertFalse(copy.equals(null));
//
//		Assert.assertEquals(copy.getExamIdexam().getId(), marks.getExamIdexam().getId());
//		Assert.assertEquals(copy.getMarks(), marks.getMarks(), 0.1);
//		Assert.assertEquals(copy.getStudentIdstudent().getId(), marks.getStudentIdstudent().getId());
//		// tests for coverage completeness
//		Assert.assertFalse(marks.toString().equals(""));
//		Assert.assertEquals(copy, copy.clone());
//		// symmetric equality check
//		Assert.assertEquals(copy.clone(), copy);
//		// reflexive equality check
//		Assert.assertEquals(copy, copy);
//		// hashcode on identical object should return same number
//		Assert.assertEquals(marks.hashCode(), copy.hashCode());
//		Assert.assertNotSame(copy, 0L);
//	  // End of table
//	}
//	/**
//	 * Hibernate test case for table: yschool.results.
//	 * @throws CloneNotSupportedException on clone error
//	 */
//	@Transactional
//	@Test
//	public void testResults() throws CloneNotSupportedException {
//
//	 	DataLayerYschool dataLayerYschool = DataLayerYschoolImpl.getInstance();
//		Results results = YschoolDataPoolFactory.getResults();
//		dataLayerYschool.saveOrUpdate(results);
//
//		Integer resultsId = results.getId();
//		Results copy = results.clone();
//		dataLayerYschool.flushSession(); // flush+evict from cache to make sure we hit the DB next
//		dataLayerYschool.evict(results);
//
//		results = dataLayerYschool.getResults(resultsId); 	// load it again
//
//
//		// Validity checks
//		Assert.assertNotNull(copy);
//		// null equals check
//		Assert.assertFalse(copy.equals(null));
//
//		Assert.assertEquals(copy.getExamIdexam().getId(), results.getExamIdexam().getId());
//		Assert.assertEquals(copy.getId(), results.getId());
//		Assert.assertEquals(copy.getResults(), results.getResults());
//		Assert.assertEquals(copy.getStudentIdstudent().getId(), results.getStudentIdstudent().getId());
//		// tests for coverage completeness
//		Assert.assertFalse(results.toString().equals(""));
//		Assert.assertEquals(copy, copy.clone());
//		// symmetric equality check
//		Assert.assertEquals(copy.clone(), copy);
//		// reflexive equality check
//		Assert.assertEquals(copy, copy);
//		// hashcode on identical object should return same number
//		Assert.assertEquals(results.hashCode(), copy.hashCode());
//		Assert.assertNotSame(copy, 0L);
//	  // End of table
//	}
//	/**
//	 * Hibernate test case for table: yschool.role.
//	 * @throws CloneNotSupportedException on clone error
//	 */
//	@Transactional
//	@Test
//	public void testRole() throws CloneNotSupportedException {
//
//	 	DataLayerYschool dataLayerYschool = DataLayerYschoolImpl.getInstance();
//		Role role = YschoolDataPoolFactory.getRole();
//		dataLayerYschool.saveOrUpdate(role);
//
//		Integer roleId = role.getId();
//		Role copy = role.clone();
//		dataLayerYschool.flushSession(); // flush+evict from cache to make sure we hit the DB next
//		dataLayerYschool.evict(role);
//
//		role = dataLayerYschool.getRole(roleId); 	// load it again
//
//
//		// Validity checks
//		Assert.assertNotNull(copy);
//		// null equals check
//		Assert.assertFalse(copy.equals(null));
//
//		Assert.assertEquals(copy.getRoleName(), role.getRoleName());
//		// tests for coverage completeness
//		Assert.assertFalse(role.toString().equals(""));
//		Assert.assertEquals(copy, copy.clone());
//		// symmetric equality check
//		Assert.assertEquals(copy.clone(), copy);
//		// reflexive equality check
//		Assert.assertEquals(copy, copy);
//		// hashcode on identical object should return same number
//		Assert.assertEquals(role.hashCode(), copy.hashCode());
//		Assert.assertNotSame(copy, 0L);
//	  // End of table
//	}
//	/**
//	 * Hibernate test case for table: yschool.school.
//	 * @throws CloneNotSupportedException on clone error
//	 */
//	@Transactional
//	@Test
//	public void testSchool() throws CloneNotSupportedException {
//
//	 	DataLayerYschool dataLayerYschool = DataLayerYschoolImpl.getInstance();
//		School school = YschoolDataPoolFactory.getSchool();
//		dataLayerYschool.saveOrUpdate(school);
//
//		Integer schoolId = school.getId();
//		School copy = school.clone();
//		dataLayerYschool.flushSession(); // flush+evict from cache to make sure we hit the DB next
//		dataLayerYschool.evict(school);
//
//		school = dataLayerYschool.getSchool(schoolId); 	// load it again
//
//
//		// Validity checks
//		Assert.assertNotNull(copy);
//		// null equals check
//		Assert.assertFalse(copy.equals(null));
//
//		Assert.assertEquals(copy.getAddress(), school.getAddress());
//		Assert.assertEquals(copy.getDistrict(), school.getDistrict());
//		Assert.assertEquals(copy.getName(), school.getName());
//		Assert.assertEquals(copy.getProvince(), school.getProvince());
//		Assert.assertEquals(copy.getZone(), school.getZone());
//		// tests for coverage completeness
//		Assert.assertFalse(school.toString().equals(""));
//		Assert.assertEquals(copy, copy.clone());
//		// symmetric equality check
//		Assert.assertEquals(copy.clone(), copy);
//		// reflexive equality check
//		Assert.assertEquals(copy, copy);
//		// hashcode on identical object should return same number
//		Assert.assertEquals(school.hashCode(), copy.hashCode());
//		Assert.assertNotSame(copy, 0L);
//	  // End of table
//	}
//	/**
//	 * Hibernate test case for table: yschool.school_has_staff_has_role.
//	 * @throws CloneNotSupportedException on clone error
//	 */
//	@Transactional
//	@Test
//	public void testSchoolHasStaffHasRole() throws CloneNotSupportedException {
//
//	 	DataLayerYschool dataLayerYschool = DataLayerYschoolImpl.getInstance();
//		SchoolHasStaffHasRole schoolHasStaffHasRole = YschoolDataPoolFactory.getSchoolHasStaffHasRole();
//		// Cascading on this property was switched off from config (or requires hbn bug workaround). Performing manual cascade.
//		org.yarlithub.yschool.repository.factories.yschool.HibernateYschoolDaoFactory.getSchoolDao().saveOrUpdate(((org.yarlithub.yschool.repository.model.obj.yschool.SchoolHasStaffHasRolePK)schoolHasStaffHasRole.getId()).getSchoolIdschool());
//		// Cascading on this property was switched off from config (or requires hbn bug workaround). Performing manual cascade.
//		org.yarlithub.yschool.repository.factories.yschool.HibernateYschoolDaoFactory.getStaffHasRoleDao().saveOrUpdate(((org.yarlithub.yschool.repository.model.obj.yschool.SchoolHasStaffHasRolePK)schoolHasStaffHasRole.getId()).getStaffHasRoleIdstaffHasRole());
//		dataLayerYschool.saveOrUpdate(schoolHasStaffHasRole);
//
//		SchoolHasStaffHasRolePK schoolHasStaffHasRoleId = schoolHasStaffHasRole.getId();
//		SchoolHasStaffHasRole copy = schoolHasStaffHasRole.clone();
//		dataLayerYschool.flushSession(); // flush+evict from cache to make sure we hit the DB next
//		dataLayerYschool.evict(schoolHasStaffHasRole);
//
//		schoolHasStaffHasRole = dataLayerYschool.getSchoolHasStaffHasRole(schoolHasStaffHasRoleId); 	// load it again
//
//
//		// Validity checks
//		Assert.assertNotNull(copy);
//		// null equals check
//		Assert.assertFalse(copy.equals(null));
//
//		Assert.assertEquals(copy.getId(), schoolHasStaffHasRole.getId());
//		// tests for coverage completeness
//		Assert.assertFalse(schoolHasStaffHasRole.toString().equals(""));
//		Assert.assertEquals(copy, copy.clone());
//		// symmetric equality check
//		Assert.assertEquals(copy.clone(), copy);
//		// reflexive equality check
//		Assert.assertEquals(copy, copy);
//		// hashcode on identical object should return same number
//		Assert.assertEquals(schoolHasStaffHasRole.hashCode(), copy.hashCode());
//		Assert.assertNotSame(copy, 0L);
//	  // End of table
//	}
//	/**
//	 * Hibernate test case for table: yschool.section.
//	 * @throws CloneNotSupportedException on clone error
//	 */
//	@Transactional
//	@Test
//	public void testSection() throws CloneNotSupportedException {
//
//	 	DataLayerYschool dataLayerYschool = DataLayerYschoolImpl.getInstance();
//		Section section = YschoolDataPoolFactory.getSection();
//		dataLayerYschool.saveOrUpdate(section);
//
//		Integer sectionId = section.getId();
//		Section copy = section.clone();
//		dataLayerYschool.flushSession(); // flush+evict from cache to make sure we hit the DB next
//		dataLayerYschool.evict(section);
//
//		section = dataLayerYschool.getSection(sectionId); 	// load it again
//
//
//		// Validity checks
//		Assert.assertNotNull(copy);
//		// null equals check
//		Assert.assertFalse(copy.equals(null));
//
//		Assert.assertEquals(copy.getSectionName(), section.getSectionName());
//		// tests for coverage completeness
//		Assert.assertFalse(section.toString().equals(""));
//		Assert.assertEquals(copy, copy.clone());
//		// symmetric equality check
//		Assert.assertEquals(copy.clone(), copy);
//		// reflexive equality check
//		Assert.assertEquals(copy, copy);
//		// hashcode on identical object should return same number
//		Assert.assertEquals(section.hashCode(), copy.hashCode());
//		Assert.assertNotSame(copy, 0L);
//	  // End of table
//	}
//	/**
//	 * Hibernate test case for table: yschool.section_has_staff_has_role.
//	 * @throws CloneNotSupportedException on clone error
//	 */
//	@Transactional
//	@Test
//	public void testSectionHasStaffHasRole() throws CloneNotSupportedException {
//
//	 	DataLayerYschool dataLayerYschool = DataLayerYschoolImpl.getInstance();
//		SectionHasStaffHasRole sectionHasStaffHasRole = YschoolDataPoolFactory.getSectionHasStaffHasRole();
//		// Cascading on this property was switched off from config (or requires hbn bug workaround). Performing manual cascade.
//		org.yarlithub.yschool.repository.factories.yschool.HibernateYschoolDaoFactory.getSectionDao().saveOrUpdate(((org.yarlithub.yschool.repository.model.obj.yschool.SectionHasStaffHasRolePK)sectionHasStaffHasRole.getId()).getSectionIdsection());
//		// Cascading on this property was switched off from config (or requires hbn bug workaround). Performing manual cascade.
//		org.yarlithub.yschool.repository.factories.yschool.HibernateYschoolDaoFactory.getStaffHasRoleDao().saveOrUpdate(((org.yarlithub.yschool.repository.model.obj.yschool.SectionHasStaffHasRolePK)sectionHasStaffHasRole.getId()).getStaffHasRoleIdstaffHasRole());
//		dataLayerYschool.saveOrUpdate(sectionHasStaffHasRole);
//
//		SectionHasStaffHasRolePK sectionHasStaffHasRoleId = sectionHasStaffHasRole.getId();
//		SectionHasStaffHasRole copy = sectionHasStaffHasRole.clone();
//		dataLayerYschool.flushSession(); // flush+evict from cache to make sure we hit the DB next
//		dataLayerYschool.evict(sectionHasStaffHasRole);
//
//		sectionHasStaffHasRole = dataLayerYschool.getSectionHasStaffHasRole(sectionHasStaffHasRoleId); 	// load it again
//
//
//		// Validity checks
//		Assert.assertNotNull(copy);
//		// null equals check
//		Assert.assertFalse(copy.equals(null));
//
//		Assert.assertEquals(copy.getId(), sectionHasStaffHasRole.getId());
//		// tests for coverage completeness
//		Assert.assertFalse(sectionHasStaffHasRole.toString().equals(""));
//		Assert.assertEquals(copy, copy.clone());
//		// symmetric equality check
//		Assert.assertEquals(copy.clone(), copy);
//		// reflexive equality check
//		Assert.assertEquals(copy, copy);
//		// hashcode on identical object should return same number
//		Assert.assertEquals(sectionHasStaffHasRole.hashCode(), copy.hashCode());
//		Assert.assertNotSame(copy, 0L);
//	  // End of table
//	}
//	/**
//	 * Hibernate test case for table: yschool.staff.
//	 * @throws CloneNotSupportedException on clone error
//	 */
//	@Transactional
//	@Test
//	public void testStaff() throws CloneNotSupportedException {
//
//	 	DataLayerYschool dataLayerYschool = DataLayerYschoolImpl.getInstance();
//		Staff staff = YschoolDataPoolFactory.getStaff();
//		dataLayerYschool.saveOrUpdate(staff);
//
//		Integer staffId = staff.getId();
//		Staff copy = staff.clone();
//		dataLayerYschool.flushSession(); // flush+evict from cache to make sure we hit the DB next
//		dataLayerYschool.evict(staff);
//
//		staff = dataLayerYschool.getStaff(staffId); 	// load it again
//
//
//		// Validity checks
//		Assert.assertNotNull(copy);
//		// null equals check
//		Assert.assertFalse(copy.equals(null));
//
//		Assert.assertEquals(copy.getFullName(), staff.getFullName());
//		Assert.assertEquals(copy.getName(), staff.getName());
//		Assert.assertEquals(copy.getPhoto(), staff.getPhoto());
//		Assert.assertEquals(copy.getStaffid(), staff.getStaffid());
//		// tests for coverage completeness
//		Assert.assertFalse(staff.toString().equals(""));
//		Assert.assertEquals(copy, copy.clone());
//		// symmetric equality check
//		Assert.assertEquals(copy.clone(), copy);
//		// reflexive equality check
//		Assert.assertEquals(copy, copy);
//		// hashcode on identical object should return same number
//		Assert.assertEquals(staff.hashCode(), copy.hashCode());
//		Assert.assertNotSame(copy, 0L);
//	  // End of table
//	}
//	/**
//	 * Hibernate test case for table: yschool.staff_has_role.
//	 * @throws CloneNotSupportedException on clone error
//	 */
//	@Transactional
//	@Test
//	public void testStaffHasRole() throws CloneNotSupportedException {
//
//	 	DataLayerYschool dataLayerYschool = DataLayerYschoolImpl.getInstance();
//		StaffHasRole staffHasRole = YschoolDataPoolFactory.getStaffHasRole();
//		dataLayerYschool.saveOrUpdate(staffHasRole);
//
//		Integer staffHasRoleId = staffHasRole.getId();
//		StaffHasRole copy = staffHasRole.clone();
//		dataLayerYschool.flushSession(); // flush+evict from cache to make sure we hit the DB next
//		dataLayerYschool.evict(staffHasRole);
//
//		staffHasRole = dataLayerYschool.getStaffHasRole(staffHasRoleId); 	// load it again
//
//
//		// Validity checks
//		Assert.assertNotNull(copy);
//		// null equals check
//		Assert.assertFalse(copy.equals(null));
//
//		Assert.assertEquals(new java.text.SimpleDateFormat("dd/MM/yyyy").format(copy.getEndDate().getTime()), new java.text.SimpleDateFormat("dd/MM/yyyy").format(staffHasRole.getEndDate().getTime()));
//		Assert.assertEquals(copy.getRoleIdrole().getId(), staffHasRole.getRoleIdrole().getId());
//		Assert.assertEquals(copy.getStaffIdstaff().getId(), staffHasRole.getStaffIdstaff().getId());
//		Assert.assertEquals(new java.text.SimpleDateFormat("dd/MM/yyyy").format(copy.getStartDate().getTime()), new java.text.SimpleDateFormat("dd/MM/yyyy").format(staffHasRole.getStartDate().getTime()));
//		// tests for coverage completeness
//		Assert.assertFalse(staffHasRole.toString().equals(""));
//		Assert.assertEquals(copy, copy.clone());
//		// symmetric equality check
//		Assert.assertEquals(copy.clone(), copy);
//		// reflexive equality check
//		Assert.assertEquals(copy, copy);
//		// hashcode on identical object should return same number
//		Assert.assertEquals(staffHasRole.hashCode(), copy.hashCode());
//		Assert.assertNotSame(copy, 0L);
//	  // End of table
//	}
//	/**
//	 * Hibernate test case for table: yschool.student.
//	 * @throws CloneNotSupportedException on clone error
//	 */
//	@Transactional
//	@Test
//	public void testStudent() throws CloneNotSupportedException {
//
//	 	DataLayerYschool dataLayerYschool = DataLayerYschoolImpl.getInstance();
//		Student student = YschoolDataPoolFactory.getStudent();
//		dataLayerYschool.saveOrUpdate(student);
//
//		Integer studentId = student.getId();
//		Student copy = student.clone();
//		dataLayerYschool.flushSession(); // flush+evict from cache to make sure we hit the DB next
//		dataLayerYschool.evict(student);
//
//		student = dataLayerYschool.getStudent(studentId); 	// load it again
//
//
//		// Validity checks
//		Assert.assertNotNull(copy);
//		// null equals check
//		Assert.assertFalse(copy.equals(null));
//
//		Assert.assertEquals(copy.getAddmisionNo(), student.getAddmisionNo());
//		Assert.assertEquals(copy.getAddress(), student.getAddress());
//		Assert.assertEquals(new java.text.SimpleDateFormat("dd/MM/yyyy").format(copy.getDob().getTime()), new java.text.SimpleDateFormat("dd/MM/yyyy").format(student.getDob().getTime()));
//		Assert.assertEquals(copy.getFullName(), student.getFullName());
//		Assert.assertEquals(copy.getGender(), student.getGender());
//		Assert.assertEquals(copy.getName(), student.getName());
//		Assert.assertEquals(copy.getNameWtInitial(), student.getNameWtInitial());
//		Assert.assertEquals(copy.getPhoto(), student.getPhoto());
//		// tests for coverage completeness
//		Assert.assertFalse(student.toString().equals(""));
//		Assert.assertEquals(copy, copy.clone());
//		// symmetric equality check
//		Assert.assertEquals(copy.clone(), copy);
//		// reflexive equality check
//		Assert.assertEquals(copy, copy);
//		// hashcode on identical object should return same number
//		Assert.assertEquals(student.hashCode(), copy.hashCode());
//		Assert.assertNotSame(copy, 0L);
//	  // End of table
//	}
//	/**
//	 * Hibernate test case for table: yschool.student_classroom_subject.
//	 * @throws CloneNotSupportedException on clone error
//	 */
//	@Transactional
//	@Test
//	public void testStudentClassroomSubject() throws CloneNotSupportedException {
//
//	 	DataLayerYschool dataLayerYschool = DataLayerYschoolImpl.getInstance();
//		StudentClassroomSubject studentClassroomSubject = YschoolDataPoolFactory.getStudentClassroomSubject();
//		dataLayerYschool.saveOrUpdate(studentClassroomSubject);
//
//		Integer studentClassroomSubjectId = studentClassroomSubject.getId();
//		StudentClassroomSubject copy = studentClassroomSubject.clone();
//		dataLayerYschool.flushSession(); // flush+evict from cache to make sure we hit the DB next
//		dataLayerYschool.evict(studentClassroomSubject);
//
//		studentClassroomSubject = dataLayerYschool.getStudentClassroomSubject(studentClassroomSubjectId); 	// load it again
//
//
//		// Validity checks
//		Assert.assertNotNull(copy);
//		// null equals check
//		Assert.assertFalse(copy.equals(null));
//
//		Assert.assertEquals(copy.getClassroomStudentIdclassroomStudent().getId(), studentClassroomSubject.getClassroomStudentIdclassroomStudent().getId());
//		Assert.assertEquals(copy.getClassroomSubjectIdclassroomSubject().getId(), studentClassroomSubject.getClassroomSubjectIdclassroomSubject().getId());
//		// tests for coverage completeness
//		Assert.assertFalse(studentClassroomSubject.toString().equals(""));
//		Assert.assertEquals(copy, copy.clone());
//		// symmetric equality check
//		Assert.assertEquals(copy.clone(), copy);
//		// reflexive equality check
//		Assert.assertEquals(copy, copy);
//		// hashcode on identical object should return same number
//		Assert.assertEquals(studentClassroomSubject.hashCode(), copy.hashCode());
//		Assert.assertNotSame(copy, 0L);
//	  // End of table
//	}
//	/**
//	 * Hibernate test case for table: yschool.subject.
//	 * @throws CloneNotSupportedException on clone error
//	 */
//	@Transactional
//	@Test
//	public void testSubject() throws CloneNotSupportedException {
//
//	 	DataLayerYschool dataLayerYschool = DataLayerYschoolImpl.getInstance();
//		Subject subject = YschoolDataPoolFactory.getSubject();
//		dataLayerYschool.saveOrUpdate(subject);
//
//		Integer subjectId = subject.getId();
//		Subject copy = subject.clone();
//		dataLayerYschool.flushSession(); // flush+evict from cache to make sure we hit the DB next
//		dataLayerYschool.evict(subject);
//
//		subject = dataLayerYschool.getSubject(subjectId); 	// load it again
//
//
//		// Validity checks
//		Assert.assertNotNull(copy);
//		// null equals check
//		Assert.assertFalse(copy.equals(null));
//
//		Assert.assertEquals(copy.isIsOptional(), subject.isIsOptional());
//		Assert.assertEquals(copy.getName(), subject.getName());
//		// tests for coverage completeness
//		Assert.assertFalse(subject.toString().equals(""));
//		Assert.assertEquals(copy, copy.clone());
//		// symmetric equality check
//		Assert.assertEquals(copy.clone(), copy);
//		// reflexive equality check
//		Assert.assertEquals(copy, copy);
//		// hashcode on identical object should return same number
//		Assert.assertEquals(subject.hashCode(), copy.hashCode());
//		Assert.assertNotSame(copy, 0L);
//	  // End of table
//	}
//	/**
//	 * Hibernate test case for table: yschool.user.
//	 * @throws CloneNotSupportedException on clone error
//	 */
//	@Transactional
//	@Test
//	public void testUser() throws CloneNotSupportedException {
//
//	 	DataLayerYschool dataLayerYschool = DataLayerYschoolImpl.getInstance();
//		User user = YschoolDataPoolFactory.getUser();
//		dataLayerYschool.saveOrUpdate(user);
//
//		Integer userId = user.getId();
//		User copy = user.clone();
//		dataLayerYschool.flushSession(); // flush+evict from cache to make sure we hit the DB next
//		dataLayerYschool.evict(user);
//
//		user = dataLayerYschool.getUser(userId); 	// load it again
//
//
//		// Validity checks
//		Assert.assertNotNull(copy);
//		// null equals check
//		Assert.assertFalse(copy.equals(null));
//
//		Assert.assertEquals(copy.getEmail(), user.getEmail());
//		Assert.assertEquals(copy.getPassword(), user.getPassword());
//		Assert.assertEquals(copy.getUserName(), user.getUserName());
//		Assert.assertEquals(copy.getUserRoleIduserRole().getId(), user.getUserRoleIduserRole().getId());
//		// tests for coverage completeness
//		Assert.assertFalse(user.toString().equals(""));
//		Assert.assertEquals(copy, copy.clone());
//		// symmetric equality check
//		Assert.assertEquals(copy.clone(), copy);
//		// reflexive equality check
//		Assert.assertEquals(copy, copy);
//		// hashcode on identical object should return same number
//		Assert.assertEquals(user.hashCode(), copy.hashCode());
//		Assert.assertNotSame(copy, 0L);
//	  // End of table
//	}
//	/**
//	 * Hibernate test case for table: yschool.user_role.
//	 * @throws CloneNotSupportedException on clone error
//	 */
//	@Transactional
//	@Test
//	public void testUserRole() throws CloneNotSupportedException {
//
//	 	DataLayerYschool dataLayerYschool = DataLayerYschoolImpl.getInstance();
//		UserRole userRole = YschoolDataPoolFactory.getUserRole();
//		dataLayerYschool.saveOrUpdate(userRole);
//
//		Integer userRoleId = userRole.getId();
//		UserRole copy = userRole.clone();
//		dataLayerYschool.flushSession(); // flush+evict from cache to make sure we hit the DB next
//		dataLayerYschool.evict(userRole);
//
//		userRole = dataLayerYschool.getUserRole(userRoleId); 	// load it again
//
//
//		// Validity checks
//		Assert.assertNotNull(copy);
//		// null equals check
//		Assert.assertFalse(copy.equals(null));
//
//		Assert.assertEquals(copy.getName(), userRole.getName());
//		// tests for coverage completeness
//		Assert.assertFalse(userRole.toString().equals(""));
//		Assert.assertEquals(copy, copy.clone());
//		// symmetric equality check
//		Assert.assertEquals(copy.clone(), copy);
//		// reflexive equality check
//		Assert.assertEquals(copy, copy);
//		// hashcode on identical object should return same number
//		Assert.assertEquals(userRole.hashCode(), copy.hashCode());
//		Assert.assertNotSame(copy, 0L);
//	  // End of table
//	}
//
//	/**
//	 * Clears the database.
//	 */
//	@Test
//	@Transactional
//	public void testPostCleanDBFirstPass() {
//		// We'll ignore any exceptions in this pass to give time for the custom exec to execute too
//		// (+ clear out any DB loops)
//
//		try{HibernateYschoolDaoFactory.getUserDao().getQuery("delete from User").executeUpdate(); } catch (Exception e) { /* do nothing */ }
//		try{HibernateYschoolDaoFactory.getStudentClassroomSubjectDao().getQuery("delete from StudentClassroomSubject").executeUpdate(); } catch (Exception e) { /* do nothing */ }
//		try{HibernateYschoolDaoFactory.getSectionHasStaffHasRoleDao().getQuery("delete from SectionHasStaffHasRole").executeUpdate(); } catch (Exception e) { /* do nothing */ }
//		try{HibernateYschoolDaoFactory.getSchoolHasStaffHasRoleDao().getQuery("delete from SchoolHasStaffHasRole").executeUpdate(); } catch (Exception e) { /* do nothing */ }
//		try{HibernateYschoolDaoFactory.getResultsDao().getQuery("delete from Results").executeUpdate(); } catch (Exception e) { /* do nothing */ }
//		try{HibernateYschoolDaoFactory.getMarksDao().getQuery("delete from Marks").executeUpdate(); } catch (Exception e) { /* do nothing */ }
//		try{HibernateYschoolDaoFactory.getClassroomSubjectHasStaffHasRoleDao().getQuery("delete from ClassroomSubjectHasStaffHasRole").executeUpdate(); } catch (Exception e) { /* do nothing */ }
//		try{HibernateYschoolDaoFactory.getClassroomSubjectDao().getQuery("delete from ClassroomSubject").executeUpdate(); } catch (Exception e) { /* do nothing */ }
//		try{HibernateYschoolDaoFactory.getClassroomStudentDao().getQuery("delete from ClassroomStudent").executeUpdate(); } catch (Exception e) { /* do nothing */ }
//		try{HibernateYschoolDaoFactory.getClassroomHasStaffHasRoleDao().getQuery("delete from ClassroomHasStaffHasRole").executeUpdate(); } catch (Exception e) { /* do nothing */ }
//		try{HibernateYschoolDaoFactory.getUserRoleDao().getQuery("delete from UserRole").executeUpdate(); } catch (Exception e) { /* do nothing */ }
//		try{HibernateYschoolDaoFactory.getSubjectDao().getQuery("delete from Subject").executeUpdate(); } catch (Exception e) { /* do nothing */ }
//		try{HibernateYschoolDaoFactory.getStudentDao().getQuery("delete from Student").executeUpdate(); } catch (Exception e) { /* do nothing */ }
//		try{HibernateYschoolDaoFactory.getStaffHasRoleDao().getQuery("delete from StaffHasRole").executeUpdate(); } catch (Exception e) { /* do nothing */ }
//		try{HibernateYschoolDaoFactory.getStaffDao().getQuery("delete from Staff").executeUpdate(); } catch (Exception e) { /* do nothing */ }
//		try{HibernateYschoolDaoFactory.getSectionDao().getQuery("delete from Section").executeUpdate(); } catch (Exception e) { /* do nothing */ }
//		try{HibernateYschoolDaoFactory.getSchoolDao().getQuery("delete from School").executeUpdate(); } catch (Exception e) { /* do nothing */ }
//		try{HibernateYschoolDaoFactory.getRoleDao().getQuery("delete from Role").executeUpdate(); } catch (Exception e) { /* do nothing */ }
//		try{HibernateYschoolDaoFactory.getExamTypeDao().getQuery("delete from ExamType").executeUpdate(); } catch (Exception e) { /* do nothing */ }
//		try{HibernateYschoolDaoFactory.getExamDao().getQuery("delete from Exam").executeUpdate(); } catch (Exception e) { /* do nothing */ }
//		try{HibernateYschoolDaoFactory.getClassroomDao().getQuery("delete from Classroom").executeUpdate(); } catch (Exception e) { /* do nothing */ }
//
//
//
//	}
//
//	/**
//	 * Clears the database.
//	 */
//	@Test
//	@Transactional
//	public void postCleanDBFinalPass() {
//
//		HibernateYschoolDaoFactory.getUserDao().getQuery("delete from User").executeUpdate();
//		HibernateYschoolDaoFactory.getStudentClassroomSubjectDao().getQuery("delete from StudentClassroomSubject").executeUpdate();
//		HibernateYschoolDaoFactory.getSectionHasStaffHasRoleDao().getQuery("delete from SectionHasStaffHasRole").executeUpdate();
//		HibernateYschoolDaoFactory.getSchoolHasStaffHasRoleDao().getQuery("delete from SchoolHasStaffHasRole").executeUpdate();
//		HibernateYschoolDaoFactory.getResultsDao().getQuery("delete from Results").executeUpdate();
//		HibernateYschoolDaoFactory.getMarksDao().getQuery("delete from Marks").executeUpdate();
//		HibernateYschoolDaoFactory.getClassroomSubjectHasStaffHasRoleDao().getQuery("delete from ClassroomSubjectHasStaffHasRole").executeUpdate();
//		HibernateYschoolDaoFactory.getClassroomSubjectDao().getQuery("delete from ClassroomSubject").executeUpdate();
//		HibernateYschoolDaoFactory.getClassroomStudentDao().getQuery("delete from ClassroomStudent").executeUpdate();
//		HibernateYschoolDaoFactory.getClassroomHasStaffHasRoleDao().getQuery("delete from ClassroomHasStaffHasRole").executeUpdate();
//		HibernateYschoolDaoFactory.getUserRoleDao().getQuery("delete from UserRole").executeUpdate();
//		HibernateYschoolDaoFactory.getSubjectDao().getQuery("delete from Subject").executeUpdate();
//		HibernateYschoolDaoFactory.getStudentDao().getQuery("delete from Student").executeUpdate();
//		HibernateYschoolDaoFactory.getStaffHasRoleDao().getQuery("delete from StaffHasRole").executeUpdate();
//		HibernateYschoolDaoFactory.getStaffDao().getQuery("delete from Staff").executeUpdate();
//		HibernateYschoolDaoFactory.getSectionDao().getQuery("delete from Section").executeUpdate();
//		HibernateYschoolDaoFactory.getSchoolDao().getQuery("delete from School").executeUpdate();
//		HibernateYschoolDaoFactory.getRoleDao().getQuery("delete from Role").executeUpdate();
//		HibernateYschoolDaoFactory.getExamTypeDao().getQuery("delete from ExamType").executeUpdate();
//		HibernateYschoolDaoFactory.getExamDao().getQuery("delete from Exam").executeUpdate();
//		HibernateYschoolDaoFactory.getClassroomDao().getQuery("delete from Classroom").executeUpdate();
//
//
//
//	}
//
//}
//
